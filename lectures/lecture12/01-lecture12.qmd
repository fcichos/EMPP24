# Lecture 12
## Advanced Waves and Final Project Introduction

### Python Concepts
  - Introduction to more advanced simulation techniques (e.g., finite difference methods).
  - Structuring a Python project (modules, documentation, testing).

### Application
  - Simulating wave propagation, reflection, and transmission in different media.
  - Visualization: Animating wave motion and energy transfer.

#### Final Project Overview
    - Introduction to the final project, where students choose a physics problem to model and solve using Python.
    - Discussion of project expectations, timelines, and resources.
    - Homework: Start working on the final project by selecting a topic and outlining the approach.



    ## Ideal Gas Simulation with Pressure, Gravity, and Collisions

    Use the sliders below to adjust the speed of the gas particles and the gravitational force acting on them. The pressure exerted by the particles on the container walls will be displayed.

```{=html}
<div>
  <label for="speedSlider">Adjust Particle Speed:</label>
  <input type="range" id="speedSlider" min="0.01" max="1.0" value="0.2" step="0.01">
</div>
<div>
  <label for="gravitySlider">Adjust Gravity:</label>
  <input type="range" id="gravitySlider" min="0" max="0.01" value="0.005" step="0.001">
</div>
<p>Pressure: <span id="pressureDisplay">0</span> Pa</p>
<svg id="gasSimulation" width="600" height="600" style="border:1px solid #000000;"></svg>

<script src="https://d3js.org/d3.v7.min.js"></script>
<script>
// SVG setup
const svg = d3.select("#gasSimulation");
const width = +svg.attr("width");
const height = +svg.attr("height");

// Define the gradient for shaded spheres
const gradient = svg.append("defs")
    .append("radialGradient")
    .attr("id", "sphereGradient")
    .attr("cx", "30%")
    .attr("cy", "30%");

gradient.append("stop")
    .attr("offset", "0%")
    .attr("stop-color", "white");

gradient.append("stop")
    .attr("offset", "100%")
    .attr("stop-color", "red");

// Particle class definition
class Particle {
  constructor(x, y, vx, vy, radius = 5, mass = 1) {
    this.x = x;
    this.y = y;
    this.vx = vx;
    this.vy = vy;
    this.radius = radius;
    this.mass = mass;
  }

  update(gravity) {
    let momentumChange = 0;

    this.vy += gravity;
    this.x += this.vx;
    this.y += this.vy;

    if (this.x - this.radius < 0 || this.x + this.radius > width) {
      this.vx = -this.vx;
      momentumChange += 2 * this.mass * Math.abs(this.vx);
    }
    if (this.y - this.radius < 0 || this.y + this.radius > height) {
      this.vy = -this.vy;
      momentumChange += 2 * this.mass * Math.abs(this.vy);
    }

    return momentumChange;
  }

  checkCollision(otherParticle) {
    const dx = otherParticle.x - this.x;
    const dy = otherParticle.y - this.y;
    const distance = Math.sqrt(dx * dx + dy * dy);

    if (distance < this.radius + otherParticle.radius) {
      const angle = Math.atan2(dy, dx);
      const sin = Math.sin(angle);
      const cos = Math.cos(angle);

      const x1 = 0;
      const y1 = 0;

      const x2 = dx * cos + dy * sin;
      const y2 = dy * cos - dx * sin;

      const vx1 = this.vx * cos + this.vy * sin;
      const vy1 = this.vy * cos - this.vx * sin;

      const vx2 = otherParticle.vx * cos + otherParticle.vy * sin;
      const vy2 = otherParticle.vy * cos - otherParticle.vx * sin;

      const vx1Final = ((this.mass - otherParticle.mass) * vx1 + 2 * otherParticle.mass * vx2) / (this.mass + otherParticle.mass);
      const vx2Final = ((otherParticle.mass - this.mass) * vx2 + 2 * this.mass * vx1) / (this.mass + otherParticle.mass);

      this.vx = vx1Final * cos - vy1 * sin;
      this.vy = vy1 * cos + vx1Final * sin;

      otherParticle.vx = vx2Final * cos - vy2 * sin;
      otherParticle.vy = vy2 * cos + vx2Final * sin;

      const overlap = 0.5 * (this.radius + otherParticle.radius - distance);
      this.x -= overlap * cos;
      this.y -= overlap * sin;

      otherParticle.x += overlap * cos;
      otherParticle.y += overlap * sin;
    }
  }
}

// Array to hold particles
const particles = [];
const numParticles = 500; // Reduced for better performance with SVG
let particleSpeed = 0.2;
let gravity = 0.005;

// Initialize particles
for (let i = 0; i < numParticles; i++) {
  const x = Math.random() * (width - 20) + 10;
  const y = Math.random() * (height - 20) + 10;
  const angle = Math.random() * 2 * Math.PI;
  const vx = particleSpeed * Math.cos(angle);
  const vy = particleSpeed * Math.sin(angle);
  particles.push(new Particle(x, y, vx, vy));
}

// Create SVG circles for particles
const circles = svg.selectAll("circle")
    .data(particles)
    .enter()
    .append("circle")
    .attr("r", d => d.radius)
    .attr("fill", "url(#sphereGradient)");

// Variables for pressure calculation
let totalMomentumChange = 0;
let accumulatedMomentumChange = 0;
const timeInterval = 1;
const containerArea = 2 * (width + height);

// Function to update the simulation
function updateSimulation() {
  totalMomentumChange = 0;

  for (let i = 0; i < particles.length; i++) {
    for (let j = i + 1; j < particles.length; j++) {
      particles[i].checkCollision(particles[j]);
    }
  }

  particles.forEach((particle, i) => {
    const momentumChange = particle.update(gravity);
    totalMomentumChange += momentumChange;
  });

  circles
    .attr("cx", d => d.x)
    .attr("cy", d => d.y);

  accumulatedMomentumChange += totalMomentumChange;

  requestAnimationFrame(updateSimulation);
}

// Function to update the pressure display
function updatePressureDisplay() {
  const pressure = accumulatedMomentumChange / (containerArea * timeInterval);
  document.getElementById('pressureDisplay').innerText = pressure.toFixed(2);
  accumulatedMomentumChange = 0;
}

// Event listener for speed slider
document.getElementById('speedSlider').addEventListener('input', function() {
  const newSpeed = +this.value;
  particles.forEach(particle => {
    const angle = Math.atan2(particle.vy, particle.vx);
    particle.vx = newSpeed * Math.cos(angle);
    particle.vy = newSpeed * Math.sin(angle);
  });
});

// Event listener for gravity slider
document.getElementById('gravitySlider').addEventListener('input', function() {
  gravity = +this.value;
});

// Start the simulation and pressure update
updateSimulation();
setInterval(updatePressureDisplay, 1000);
</script>
```
