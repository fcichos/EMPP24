## Modules

::: {.callout-note  title="Modules"}
Modules are Python files that consist of Python code. This code can either be functions, classes or variables. A Python module is a `.py` file containing Python code. A package is a collection of Python modules: while a module is a single Python file, a package is a directory of Python modules containing an additional `__init__.py` file, to distinguish a package from a directory that just happens to contain a bunch of Python scripts.
:::



Most of the functionality in Python is provided by *modules*. The Python Standard Library is a large collection of modules that provides *cross-platform* implementations of common facilities such as access to the operating system, file I/O, string management, network communication, math, web-scraping, text manipulation, machine learning and much more.

To use a module in a Python program it first has to be imported. A module can be imported using the `import` statement. For example, to import the module `math`, which contains many standard mathematical functions, we can do:

```{python}
#| tags: []
import math
import numpy

x = math.sqrt(2 * math.pi)
x = numpy.sqrt(2 * numpy.pi)

print(x)
```

This includes the whole module and makes it available for use later in the program. Alternatively, we can chose to import all symbols (functions and variables) in a module so that we don't need to use the prefix "`math.`" every time we use something from the `math` module:

```{python}
#| tags: []
from math import *

x = cos(2 * pi)

print(x)
```

This pattern can be very convenient, but in large programs that include many modules it is often a good idea to keep the symbols from each module in their own namespaces, by using the `import math` pattern. This would eliminate potentially confusing problems.

## Namespaces

A namespace is an identifier used to organize objects, e.g. the methods and variables of a module. The prefix `math.` we have used in the previous section is such a namespace. You may also create your own namespace for a module.

```{python}
#| tags: []
import math as m

x = m.sqrt(2)

print(x)
```

You may also only import specific functions of a module.

```{python}
#| tags: []
from math import sinh as mysinh
```

## Contents of a module

Once a module is imported, we can list the symbols it provides using the `dir` function:

```{python}
#| slideshow: {slide_type: fragment}
#| tags: []
import math

print(dir(math))
```

And using the function `help` we can get a description of each function (almost .. not all functions have docstrings, as they are technically called, but the vast majority of functions are documented this way).

```{python}
#| slideshow: {slide_type: fragment}
#| tags: []
help(math.log)
```

```{python}
#| slideshow: {slide_type: fragment}
#| tags: []
math.log(10)
```

```{python}
#| slideshow: {slide_type: fragment}
math.log(8, 2)
```

We can also use the `help` function directly on modules: Try

    help(math)

Some very useful modules form the Python standard library are `os`, `sys`, `math`, `shutil`, `re`, `subprocess`, `multiprocessing`, `threading`.

A complete lists of standard modules for Python 3 is available at http://docs.python.org/3/library/ .
