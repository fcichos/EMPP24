---
title: "Python Overview"
pyodide:
  packages:
    - matplotlib
    - numpy
notebook-url: "https://github.com/fcichos/EMPP24/blob/main/lectures/lecture01/01-lecture01.ipynb"
---


## Functions
Functions are reusable blocks of code that can be executed multiple times from different parts of your program. They help in organizing code, making it more readable, and reducing redundancy. Functions can take input arguments and return output values.

::: {.panel-tabset}
### Defining a Function

A function in Python is defined using the `def` keyword followed by the name of the function, which is usually descriptive and indicates what the function does. The parameters inside the parentheses indicate what data the function expects to receive. The `->` symbol is used to specify the return type of the function.

Here's an example:

```{pyodide}
#| autorun: false
# Define a function that takes two numbers as input and returns their sum
def add_numbers(a: int, b: int) -> int:
  return a + b
```

### Calling a Function

Functions can be called by specifying the name of the function followed by parentheses containing the arguments. The arguments passed to the function should match the number and type of parameters defined in the function.
Here's an example:

```{pyodide}
#| autorun: false
# Call the function with two numbers as input
result = add_numbers(2, 3)
print(result)  # prints 5
```
:::

## Loops

Loops are used to execute a block of code repeatedly. There are two main types of loops in Python: `for` loops and `while` loops.


::: {.panel-tabset}
### For Loop

A `for` loop in Python is used to iterate over a sequence (such as a list or string) and execute a block of code for each item in the sequence. Here's an example:

```{pyodide}
#| autorun: false
# Define a function that prints numbers from 1 to 10
def print_numbers():
  for i in range(1, 11):
    print(i)

print_numbers()
```

### While Loop

A `while` loop in Python is used to execute a block of code while a certain condition is met. The loop continues as long as the condition is true. Here's an example:

```{pyodide}
#| autorun: false
# Define a function that prints numbers from 1 to 10 using a while loop
def print_numbers_while():
  i = 1
  while i <= 10:
    print(i)
    i += 1

print_numbers_while()
```
:::

## Conditional Statements

Conditional statements are used to control the flow of your program based on conditions. The main conditional statements in Python are `if`, `else`, and `elif`.

::: {.panel-tabset}
### If Statement

An `if` statement in Python is used to execute a block of code if a certain condition is met. Here's an example:

```{pyodide}
#| autorun: false
# Define a function that prints "hello" or "goodbye" depending on the hour of day
def print_hello():
  current_hour = 12
  if current_hour < 18:
    print("hello")

print_hello()
```


### Else Statement

An `else` statement in Python is used to execute a block of code if the condition in an `if` statement is not met.  Here's an example:

```{pyodide}
#| autorun: false
# Define a function that prints "hello" or "goodbye" depending on the hour of day
def print_hello_or_goodbye():
  current_hour = 12
  if current_hour < 18:
    print("hello")
  else:
    print("goodbye")

print_hello_or_goodbye()
```

### Elif Statement

An `elif` statement in Python is used to execute a block of code if the condition in an `if` statement is not met but under an extra condition.  Here's an example:

```{pyodide}
#| autorun: false
# Define a function that prints "hello","goodbye" or "good night" depending on the hour of day
def print_hello_or_goodbye():
  current_hour = 12
  if current_hour < 18:
    print("hello")
  elif <20:
    print("goodbye")
  else:
    print("good night")

print_hello_or_goodbye()
```
:::
