{"title":"Lecture 2","markdown":{"yaml":{"title":"Lecture 2","notebook-url":"https://github.com/yourusername/yourrepository/blob/main/notebooks/my-document.ipynb"},"headingText":"Kinematics and Python","containsRefs":false,"markdown":"\n\n## Introduction to Functions\n\nFunctions are reusable blocks of code that can be executed multiple times from different parts of your program. They help in organizing code, making it more readable, and reducing redundancy. Functions can take input arguments and return output values.\n\n### Defining a Function\n\nA function in Python is defined using the `def` keyword followed by the name of the function, which is usually descriptive and indicates what the function does. The parameters inside the parentheses indicate what data the function expects to receive. The `->` symbol is used to specify the return type of the function.\n\nHere's an example:\n\n```{python}\n# Define a function that takes two numbers as input and returns their sum\ndef add_numbers(a: int, b: int) -> int:\n  return a + b\n```\n\n### Calling a Function\n\nFunctions can be called by specifying the name of the function followed by parentheses containing the arguments. The arguments passed to the function should match the number and type of parameters defined in the function.\nHere's an example:\n\n```{python}\n# Call the function with two numbers as input\nresult = add_numbers(2, 3)\nprint(result)  # prints 5\n```\n\n## Loops\n\nLoops are used to execute a block of code repeatedly. There are two main types of loops in Python: `for` loops and `while` loops.\n\n### For Loop\n\nA `for` loop in Python is used to iterate over a sequence (such as a list or string) and execute a block of code for each item in the sequence. Here's an example:\n\n```{python}\n# Define a function that prints numbers from 1 to 10\ndef print_numbers():\n  for i in range(1, 11):\n    print(i)\n\nprint_numbers()\n```\n\n### While Loop\n\nA `while` loop in Python is used to execute a block of code while a certain condition is met. The loop continues as long as the condition is true. Here's an example:\n\n```{python}\n# Define a function that prints numbers from 1 to 10 using a while loop\ndef print_numbers_while():\n  i = 1\n  while i <= 10:\n    print(i)\n    i += 1\n\nprint_numbers_while()\n```\n\n## Conditional Statements\n\nConditional statements are used to control the flow of your program based on conditions. The main conditional statements in Python are `if`, `else`, and `elif`.\n\n### If Statement\n\nAn `if` statement in Python is used to execute a block of code if a certain condition is met. Here's an example:\n\n```{python}\n# Define a function that prints \"hello\" or \"goodbye\" depending on the hour of day\ndef print_hello_or_goodbye():\n  current_hour = 12\n  if current_hour < 18:\n    print(\"hello\")\n  else:\n    print(\"goodbye\")\n\nprint_hello_or_goodbye()\n```\n\n\n### Else Statement\n\nAn `else` statement in Python is used to execute a block of code if the condition in an `if` statement is not met.  Here's an example:\n\n```{python}\n# Define a function that prints \"hello\" or \"goodbye\" depending on the hour of day\ndef print_hello_or_goodbye():\n  current_hour = 12\n  if current_hour < 18:\n    print(\"hello\")\n  else:\n    print(\"goodbye\")\n\nprint_hello_or_goodbye()\n```\n\n\n## Modules\n\nMost of the functionality in Python is provided by *modules*. The Python Standard Library is a large collection of modules that provides *cross-platform* implementations of common facilities such as access to the operating system, file I/O, string management, network communication, math, web-scraping, text manipulation, machine learning and much more.\n\nTo use a module in a Python module it first has to be imported. A module can be imported using the `import` statement. For example, to import the module `math`, which contains many standard mathematical functions, we can do:\n\n```{python}\n#| tags: []\nimport math\nimport numpy\n\nx = math.sqrt(2 * math.pi)\nx = numpy.sqrt(2 * numpy.pi)\n\nprint(x)\n```\n\nThis includes the whole module and makes it available for use later in the program. Alternatively, we can chose to import all symbols (functions and variables) in a module so that we don't need to use the prefix \"`math.`\" every time we use something from the `math` module:\n\n```{python}\n#| tags: []\nfrom math import *\n\nx = cos(2 * pi)\n\nprint(x)\n```\n\nThis pattern can be very convenient, but in large programs that include many modules it is often a good idea to keep the symbols from each module in their own namespaces, by using the `import math` pattern. This would eliminate potentially confusing problems.\n\n::: {.callout-note  title=\"Create Your Own Modules\" collapse=true}\nCreating your own modules in Python is a great way to organize your code and make it reusable. A module is simply a file containing Python definitions and statements. Here's how you can create and use your own module:\n\n#### Creating a Module\n\nTo create a module, you just need to save your Python code in a file with a `.py` extension. For example, let's create a module named `mymodule.py` with the following content:\n\n```python\n# mymodule.py\n\ndef greet(name: str) -> str:\n    return f\"Hello, {name}!\"\n\ndef add(a: int, b: int) -> int:\n    return a + b\n```\n\n#### Using Your Module\n\nOnce you have created your module, you can import it into other Python scripts using the `import` statement. Here's an example of how to use the `mymodule` we just created:\n\n```python\n# main.py\n\nimport mymodule\n\n# Use the functions from mymodule\nprint(mymodule.greet(\"Alice\"))\nprint(mymodule.add(5, 3))\n```\n\n### Importing Specific Functions\n\nYou can also import specific functions from a module using the `from ... import ...` syntax:\n\n```python\n# main.py\n\nfrom mymodule import greet, add\n\n# Use the imported functions directly\nprint(greet(\"Bob\"))\nprint(add(10, 7))\n```\n\n### Module Search Path\n\nWhen you import a module, Python searches for the module in the following locations:\n1. The directory containing the input script (or the current directory if no script is specified).\n2. The directories listed in the `PYTHONPATH` environment variable.\n3. The default directory where Python is installed.\n\nYou can view the module search path by printing the `sys.path` variable:\n\n```python\nimport sys\nprint(sys.path)\n```\n\n### Creating Packages\n\nA package is a way of organizing related modules into a directory hierarchy. A package is simply a directory that contains a special file named `__init__.py`, which can be empty. Here's an example of how to create a package:\n\n```\nmypackage/\n    __init__.py\n    module1.py\n    module2.py\n```\n\nYou can then import modules from the package using the dot notation:\n\n```python\n# main.py\n\nfrom mypackage import module1, module2\n\n# Use the functions from the modules\nprint(module1.some_function())\nprint(module2.another_function())\n```\n\nCreating and using modules and packages in Python helps you organize your code better and makes it easier to maintain and reuse.\n:::\n\n\n### Namespaces\n\n::: {.callout-note  title=\"Namespaces\"}\nA namespace is an identifier used to organize objects, e.g. the methods and variables of a module. The prefix `math.` we have used in the previous section is such a namespace. You may also create your own namespace for a module. This is done by using the `import math as mymath` pattern.\n:::\n\n```{python}\n#| tags: []\nimport math as m\n\nx = m.sqrt(2)\n\nprint(x)\n```\n\nYou may also only import specific functions of a module.\n\n```{python}\n#| tags: []\nfrom math import sinh as mysinh\n```\n\n### Contents of a module\n\nOnce a module is imported, we can list the symbols it provides using the `dir` function:\n\n```{python}\n#| slideshow: {slide_type: fragment}\n#| tags: []\nimport math\n\nprint(dir(math))\n```\n\nAnd using the function `help` we can get a description of each function (almost .. not all functions have docstrings, as they are technically called, but the vast majority of functions are documented this way).\n\n```{python}\n#| slideshow: {slide_type: fragment}\n#| tags: []\nhelp(math.log)\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\n#| tags: []\nmath.log(10)\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\nmath.log(8, 2)\n```\n\nWe can also use the `help` function directly on modules: Try\n\n    help(math)\n\nSome very useful modules form the Python standard library are `os`, `sys`, `math`, `shutil`, `re`, `subprocess`, `multiprocessing`, `threading`.\n\nA complete lists of standard modules for Python 3 is available at http://docs.python.org/3/library/ .\n\n\n::: {.callout-note  title=\"Namespaces in Your Modules\" collapse=true}\n### Namespaces in Packages\n\nYou can also create sub-packages by adding more directories with `__init__.py` files. This allows you to create a hierarchical structure for your modules:\n\n```\nmypackage/\n    __init__.py\n    subpackage/\n        __init__.py\n        submodule.py\n```\n\nYou can then import submodules using the full package name:\n\n```python\n# main.py\n\nfrom mypackage.subpackage import submodule\n\n# Use the functions from the submodule\nprint(submodule.some_sub_function())\n```\n:::\n\n\n\n**Python Application**\n\n## Function Plotting\n  - Writing a Python function to calculate and plot the position vs. time for an object moving with constant velocity or constant acceleration.\n  - Visualization: Use `matplotlib` to plot simple kinematic graphs (position vs. time, velocity vs. time).\n  - Homework: Extend the kinematic function to handle different initial conditions and plot the results.\n\n\n```{=html}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Ball Throw Simulation</title>\n    <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n</head>\n<body>\n    <div id=\"simulation\"></div>\n\n    <script>\n        // Set up the SVG\n        const width = 600;\n        const height = 400;\n        const svg = d3.select(\"#simulation\")\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        // Physics parameters\n        const g = 9.81;  // Gravity (m/s^2)\n        const v0 = 20;   // Initial velocity (m/s)\n        const angle = 60 * Math.PI / 180;  // Launch angle (radians)\n\n        // Calculate trajectory\n        function calculateTrajectory() {\n            const points = [];\n            for (let t = 0; t <= 4; t += 0.1) {\n                const x = v0 * Math.cos(angle) * t;\n                const y = v0 * Math.sin(angle) * t - 0.5 * g * t * t;\n                if (y >= 0) {\n                    points.push({x: x * 10, y: height - y * 10});\n                }\n            }\n            return points;\n        }\n\n        // Draw the trajectory\n        const lineGenerator = d3.line()\n            .x(d => d.x)\n            .y(d => d.y);\n\n        svg.append(\"path\")\n            .datum(calculateTrajectory())\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"steelblue\")\n            .attr(\"stroke-width\", 2)\n            .attr(\"d\", lineGenerator);\n\n        // Add a ball\n        const ball = svg.append(\"circle\")\n            .attr(\"r\", 5)\n            .attr(\"fill\", \"red\");\n\n        // Animate the ball\n        function animateBall() {\n            const trajectory = calculateTrajectory();\n            ball.datum({index: 0})\n                .transition()\n                .duration(4000)\n                .ease(d3.easeLinear)\n                .attrTween(\"cx\", function(d) {\n                    return function(t) {\n                        d.index = Math.floor(t * trajectory.length);\n                        return trajectory[d.index].x;\n                    };\n                })\n                .attrTween(\"cy\", function(d) {\n                    return function(t) {\n                        return trajectory[d.index].y;\n                    };\n                })\n                .on(\"end\", animateBall);\n        }\n\n        animateBall();\n    </script>\n</body>\n</html>\n```\n","srcMarkdownNoYaml":"\n\n# Kinematics and Python\n## Introduction to Functions\n\nFunctions are reusable blocks of code that can be executed multiple times from different parts of your program. They help in organizing code, making it more readable, and reducing redundancy. Functions can take input arguments and return output values.\n\n### Defining a Function\n\nA function in Python is defined using the `def` keyword followed by the name of the function, which is usually descriptive and indicates what the function does. The parameters inside the parentheses indicate what data the function expects to receive. The `->` symbol is used to specify the return type of the function.\n\nHere's an example:\n\n```{python}\n# Define a function that takes two numbers as input and returns their sum\ndef add_numbers(a: int, b: int) -> int:\n  return a + b\n```\n\n### Calling a Function\n\nFunctions can be called by specifying the name of the function followed by parentheses containing the arguments. The arguments passed to the function should match the number and type of parameters defined in the function.\nHere's an example:\n\n```{python}\n# Call the function with two numbers as input\nresult = add_numbers(2, 3)\nprint(result)  # prints 5\n```\n\n## Loops\n\nLoops are used to execute a block of code repeatedly. There are two main types of loops in Python: `for` loops and `while` loops.\n\n### For Loop\n\nA `for` loop in Python is used to iterate over a sequence (such as a list or string) and execute a block of code for each item in the sequence. Here's an example:\n\n```{python}\n# Define a function that prints numbers from 1 to 10\ndef print_numbers():\n  for i in range(1, 11):\n    print(i)\n\nprint_numbers()\n```\n\n### While Loop\n\nA `while` loop in Python is used to execute a block of code while a certain condition is met. The loop continues as long as the condition is true. Here's an example:\n\n```{python}\n# Define a function that prints numbers from 1 to 10 using a while loop\ndef print_numbers_while():\n  i = 1\n  while i <= 10:\n    print(i)\n    i += 1\n\nprint_numbers_while()\n```\n\n## Conditional Statements\n\nConditional statements are used to control the flow of your program based on conditions. The main conditional statements in Python are `if`, `else`, and `elif`.\n\n### If Statement\n\nAn `if` statement in Python is used to execute a block of code if a certain condition is met. Here's an example:\n\n```{python}\n# Define a function that prints \"hello\" or \"goodbye\" depending on the hour of day\ndef print_hello_or_goodbye():\n  current_hour = 12\n  if current_hour < 18:\n    print(\"hello\")\n  else:\n    print(\"goodbye\")\n\nprint_hello_or_goodbye()\n```\n\n\n### Else Statement\n\nAn `else` statement in Python is used to execute a block of code if the condition in an `if` statement is not met.  Here's an example:\n\n```{python}\n# Define a function that prints \"hello\" or \"goodbye\" depending on the hour of day\ndef print_hello_or_goodbye():\n  current_hour = 12\n  if current_hour < 18:\n    print(\"hello\")\n  else:\n    print(\"goodbye\")\n\nprint_hello_or_goodbye()\n```\n\n\n## Modules\n\nMost of the functionality in Python is provided by *modules*. The Python Standard Library is a large collection of modules that provides *cross-platform* implementations of common facilities such as access to the operating system, file I/O, string management, network communication, math, web-scraping, text manipulation, machine learning and much more.\n\nTo use a module in a Python module it first has to be imported. A module can be imported using the `import` statement. For example, to import the module `math`, which contains many standard mathematical functions, we can do:\n\n```{python}\n#| tags: []\nimport math\nimport numpy\n\nx = math.sqrt(2 * math.pi)\nx = numpy.sqrt(2 * numpy.pi)\n\nprint(x)\n```\n\nThis includes the whole module and makes it available for use later in the program. Alternatively, we can chose to import all symbols (functions and variables) in a module so that we don't need to use the prefix \"`math.`\" every time we use something from the `math` module:\n\n```{python}\n#| tags: []\nfrom math import *\n\nx = cos(2 * pi)\n\nprint(x)\n```\n\nThis pattern can be very convenient, but in large programs that include many modules it is often a good idea to keep the symbols from each module in their own namespaces, by using the `import math` pattern. This would eliminate potentially confusing problems.\n\n::: {.callout-note  title=\"Create Your Own Modules\" collapse=true}\nCreating your own modules in Python is a great way to organize your code and make it reusable. A module is simply a file containing Python definitions and statements. Here's how you can create and use your own module:\n\n#### Creating a Module\n\nTo create a module, you just need to save your Python code in a file with a `.py` extension. For example, let's create a module named `mymodule.py` with the following content:\n\n```python\n# mymodule.py\n\ndef greet(name: str) -> str:\n    return f\"Hello, {name}!\"\n\ndef add(a: int, b: int) -> int:\n    return a + b\n```\n\n#### Using Your Module\n\nOnce you have created your module, you can import it into other Python scripts using the `import` statement. Here's an example of how to use the `mymodule` we just created:\n\n```python\n# main.py\n\nimport mymodule\n\n# Use the functions from mymodule\nprint(mymodule.greet(\"Alice\"))\nprint(mymodule.add(5, 3))\n```\n\n### Importing Specific Functions\n\nYou can also import specific functions from a module using the `from ... import ...` syntax:\n\n```python\n# main.py\n\nfrom mymodule import greet, add\n\n# Use the imported functions directly\nprint(greet(\"Bob\"))\nprint(add(10, 7))\n```\n\n### Module Search Path\n\nWhen you import a module, Python searches for the module in the following locations:\n1. The directory containing the input script (or the current directory if no script is specified).\n2. The directories listed in the `PYTHONPATH` environment variable.\n3. The default directory where Python is installed.\n\nYou can view the module search path by printing the `sys.path` variable:\n\n```python\nimport sys\nprint(sys.path)\n```\n\n### Creating Packages\n\nA package is a way of organizing related modules into a directory hierarchy. A package is simply a directory that contains a special file named `__init__.py`, which can be empty. Here's an example of how to create a package:\n\n```\nmypackage/\n    __init__.py\n    module1.py\n    module2.py\n```\n\nYou can then import modules from the package using the dot notation:\n\n```python\n# main.py\n\nfrom mypackage import module1, module2\n\n# Use the functions from the modules\nprint(module1.some_function())\nprint(module2.another_function())\n```\n\nCreating and using modules and packages in Python helps you organize your code better and makes it easier to maintain and reuse.\n:::\n\n\n### Namespaces\n\n::: {.callout-note  title=\"Namespaces\"}\nA namespace is an identifier used to organize objects, e.g. the methods and variables of a module. The prefix `math.` we have used in the previous section is such a namespace. You may also create your own namespace for a module. This is done by using the `import math as mymath` pattern.\n:::\n\n```{python}\n#| tags: []\nimport math as m\n\nx = m.sqrt(2)\n\nprint(x)\n```\n\nYou may also only import specific functions of a module.\n\n```{python}\n#| tags: []\nfrom math import sinh as mysinh\n```\n\n### Contents of a module\n\nOnce a module is imported, we can list the symbols it provides using the `dir` function:\n\n```{python}\n#| slideshow: {slide_type: fragment}\n#| tags: []\nimport math\n\nprint(dir(math))\n```\n\nAnd using the function `help` we can get a description of each function (almost .. not all functions have docstrings, as they are technically called, but the vast majority of functions are documented this way).\n\n```{python}\n#| slideshow: {slide_type: fragment}\n#| tags: []\nhelp(math.log)\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\n#| tags: []\nmath.log(10)\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\nmath.log(8, 2)\n```\n\nWe can also use the `help` function directly on modules: Try\n\n    help(math)\n\nSome very useful modules form the Python standard library are `os`, `sys`, `math`, `shutil`, `re`, `subprocess`, `multiprocessing`, `threading`.\n\nA complete lists of standard modules for Python 3 is available at http://docs.python.org/3/library/ .\n\n\n::: {.callout-note  title=\"Namespaces in Your Modules\" collapse=true}\n### Namespaces in Packages\n\nYou can also create sub-packages by adding more directories with `__init__.py` files. This allows you to create a hierarchical structure for your modules:\n\n```\nmypackage/\n    __init__.py\n    subpackage/\n        __init__.py\n        submodule.py\n```\n\nYou can then import submodules using the full package name:\n\n```python\n# main.py\n\nfrom mypackage.subpackage import submodule\n\n# Use the functions from the submodule\nprint(submodule.some_sub_function())\n```\n:::\n\n\n\n**Python Application**\n\n## Function Plotting\n  - Writing a Python function to calculate and plot the position vs. time for an object moving with constant velocity or constant acceleration.\n  - Visualization: Use `matplotlib` to plot simple kinematic graphs (position vs. time, velocity vs. time).\n  - Homework: Extend the kinematic function to handle different initial conditions and plot the results.\n\n\n```{=html}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Ball Throw Simulation</title>\n    <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n</head>\n<body>\n    <div id=\"simulation\"></div>\n\n    <script>\n        // Set up the SVG\n        const width = 600;\n        const height = 400;\n        const svg = d3.select(\"#simulation\")\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        // Physics parameters\n        const g = 9.81;  // Gravity (m/s^2)\n        const v0 = 20;   // Initial velocity (m/s)\n        const angle = 60 * Math.PI / 180;  // Launch angle (radians)\n\n        // Calculate trajectory\n        function calculateTrajectory() {\n            const points = [];\n            for (let t = 0; t <= 4; t += 0.1) {\n                const x = v0 * Math.cos(angle) * t;\n                const y = v0 * Math.sin(angle) * t - 0.5 * g * t * t;\n                if (y >= 0) {\n                    points.push({x: x * 10, y: height - y * 10});\n                }\n            }\n            return points;\n        }\n\n        // Draw the trajectory\n        const lineGenerator = d3.line()\n            .x(d => d.x)\n            .y(d => d.y);\n\n        svg.append(\"path\")\n            .datum(calculateTrajectory())\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"steelblue\")\n            .attr(\"stroke-width\", 2)\n            .attr(\"d\", lineGenerator);\n\n        // Add a ball\n        const ball = svg.append(\"circle\")\n            .attr(\"r\", 5)\n            .attr(\"fill\", \"red\");\n\n        // Animate the ball\n        function animateBall() {\n            const trajectory = calculateTrajectory();\n            ball.datum({index: 0})\n                .transition()\n                .duration(4000)\n                .ease(d3.easeLinear)\n                .attrTween(\"cx\", function(d) {\n                    return function(t) {\n                        d.index = Math.floor(t * trajectory.length);\n                        return trajectory[d.index].x;\n                    };\n                })\n                .attrTween(\"cy\", function(d) {\n                    return function(t) {\n                        return trajectory[d.index].y;\n                    };\n                })\n                .on(\"end\", animateBall);\n        }\n\n        animateBall();\n    </script>\n</body>\n</html>\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","number-sections":true,"css":["../../styles.css"],"include-before-body":["../../quarto-header.html"],"toc":true,"toc-depth":4,"output-file":"01-lecture02.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","bibliography":["../../references.bib"],"comments":{"hypothesis":true},"open-graph":{"title":"Title for Open Graph"},"theme":["simplex","../../custom.scss"],"backgroundcolor":"#F5F5F5","header-includes":["<img src=\"../../CompSoft_banner.png\" style=\"width: 100%; height: auto; display: block; margin: 0 auto;\">\n"],"toc-location":"right","toc-title":"On this page","title":"Lecture 2","notebook-url":"https://github.com/yourusername/yourrepository/blob/main/notebooks/my-document.ipynb"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","number-sections":true,"output-file":"pdf-book"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"block-headings":true,"bibliography":["../../references.bib"],"comments":{"hypothesis":true},"open-graph":{"title":"Title for Open Graph"},"documentclass":"scrreprt","title":"Lecture 2","notebook-url":"https://github.com/yourusername/yourrepository/blob/main/notebooks/my-document.ipynb"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}