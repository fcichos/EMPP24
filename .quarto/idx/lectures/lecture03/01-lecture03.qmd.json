{"title":"Lecture 3","markdown":{"yaml":{"title":"Lecture 3"},"headingText":"Dynamics and Simple Motion","containsRefs":false,"markdown":"\n\n\n  - Lists and arrays (introduction to `numpy` for numerical operations).\n  - Basic vector operations using `numpy`.\n\n\n::: {.callout-note title=\"Numpy Array\"}\nThe NumPy array, formally called ndarray in NumPy documentation, is the real workhorse of data structures for scientific and engineering applications. The NumPy array is similar to a list but where all the elements of the list are of the same type. The elements of a **NumPy array** are usually numbers, but can also be booleans, strings, or other objects. When the elements are numbers, they must all be of the same type. For example, they might be all integers or all floating point numbers. NumPy arrays are more efficient than Python lists for storing and manipulating data.\n:::\n\n```{python}\n    #| slideshow: {slide_type: fragment}\n    import numpy as np\n```\n\n## Creating Numpy Arrays\n\n  There are a number of ways to initialize new numpy arrays, for example from\n\n  * a Python list or tuples using `np.array`\n  * using functions that are dedicated to generating numpy arrays, such as `arange`, `linspace`, etc.\n  * reading data from files which will be covered in the files section of this course.\n\n### From lists\n\n  For example, to create new vector and matrix arrays from Python lists we can use the `numpy.array` function. This is demonstrated in the following cells:\n\n```{python}\n  #this is a list\n  a = [0, 0, 1, 4, 7, 16, 31, 64, 127]\n\n  type(a)\n```\n\n```{python}\n\n  b=np.array(a,dtype=float)\n  type(b)\n```\n\n### Using array-generating functions\n\n  For larger arrays it is inpractical to initialize the data manually, using explicit python lists. Instead we can use one of the many functions in `numpy` that generate arrays of different forms and shapes.\n  Some of the more common are:\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  # create a range\n\n  x = np.arange(0, 10, 1) # arguments: start, stop, step\n  x\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  x = np.arange(-5, -2, 0.1)\n  x\n```\n\n::: {.callout-note title=\"linspace\"}\n\n  The `linspace` function creates an array of N evenly spaced points between a starting point and an ending point. The form of the function is linspace(start, stop, N).If the third argument N is omitted,then N=50. The function `linspace` always includes the end points.\n\n:::\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  # using linspace, both end points ARE included\n  np.linspace(0,10,25)\n```\n\n::: {.callout-note title=\"logspace\"}\n  `logspace` is doing equivelent things with logaritmic spacing. The function `logspace` generates an array of N points between decades 10^start and 10^stop. The form of the function is logspace(start, stop, N). If the third argument N is omitted, then N=50. The function `logspace` always includes the end points.\n:::\n\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  np.logspace(0, 10, 10, base=np.e)\n```\n\nOther types of array creation techniques are listed below. Try around with these commands to get a feeling what they do.\n\n\n::: {.callout-note title=\"mgrid\"}\n\n  `mgrid` generates a multi-dimensional matrix with increasing value entries, for example in columns and rows. The arguments are similar to `arange` and `linspace`.\n:::\n\n```{python}\n#| slideshow: {slide_type: fragment}\nx, y = np.mgrid[0:1:0.1, 0:5] # similar to meshgrid in MATLAB\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\nx\n```\n\n```{python}\n#| tags: []\ny\n```\n\n```{python}\n#| tags: []\nnp.array([[1,2,3],[4,5,6],[7,8,9]])\n```\n\n\n::: {.callout-note title=\"diag\"}\n\n  `diag` generates a diagonal matrix with the list supplied to it as the diagonal values. The values can be also offset from the main diagonal by using the optional argument `k`. If `k` is positive, the diagonal is above the main diagonal, if negative, below the main diagonal.\n:::\n\n```{python}\n#| tags: []\n# a diagonal matrix\nnp.diag([1,2,3])\n```\n\n```{python}\n## diagonal with offset from the main diagonal\nnp.diag([1,2,3], k=-1)\n```\n\n::: {.callout-note title=\"zeros and ones\"}\n\n  `zeros` and `ones` creates a matrix with the dimensions given in the argument and filled with 0 or 1. The argument is a tuple with the dimensions of the matrix. For example, `np.zeros((3,3))` creates a 3x3 matrix filled with zeros.\n:::\n\n```{python}\n#| slideshow: {slide_type: fragment}\nnp.zeros((3,3))\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\nnp.ones((3,3))\n```\n\n## Manipulating NumPy arrays\n\n### Slicing\n\n  Slicing is the name for extracting part of an array by the syntax `M[lower:upper:step]`. When any of these are unspecified, they default to the values `lower=0`, `upper=size of dimension`, `step=1`. We can also use negative indices to count from the end of the array. Here are some examples:\n\n```{python}\n#| slideshow: {slide_type: fragment}\nA = np.array([1,2,3,4,5])\nA\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\nA[1:4]\n```\n\n  Any of the three parameters in `M[lower:upper:step]` can be ommited.\n\n```{python}\n#| slideshow: {slide_type: fragment}\nA[::] # lower, upper, step all take the default values\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\nA[::2] # step is 2, lower and upper defaults to the beginning and end of the array\n```\n\n  Negative indices counts from the end of the array (positive index from the begining) and can be used in any of the three slicing parameters. Here are some examples:\n\n```{python}\n#| slideshow: {slide_type: fragment}\nA = np.array([1,2,3,4,5])\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\nA[-1] # the last element in the array\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\nA[2:] # the last three elements\n```\n\n  Index slicing works exactly the same way for multidimensional arrays. We can slice along each axis independently. Here are some examples:\n\n```{python}\n#| slideshow: {slide_type: fragment}\nA = np.array([[n+m*10 for n in range(5)] for m in range(5)])\nA\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\n# a block from the original array\nA[1:3, 1:4]\n```\n\n\n::: {.callout-note title=\"Differences\"}\n\n  **Slicing** can be effectively used to calculate differences for example for the calculation of derivatives. Here the position $y_i$ of an object has been measured at times $t_i$ and stored in an array each. We wish to calculate the average velocity at the times $t_{i}$ from the arrays by the formula\n\n  \\begin{equation}\n  v_{i}=\\frac{y_i-y_{i-1}}{t_{i}-t_{i-1}}\n  \\end{equation}\n:::\n\n\n```{python}\n#| slideshow: {slide_type: fragment}\ny = np.array([ 0. , 1.3, 5. , 10.9, 18.9, 28.7, 40. ])\nt = np.array([ 0. , 0.49, 1. , 1.5 , 2.08, 2.55, 3.2 ])\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\nv = (y[1:]-y[:-1])/(t[1:]-t[:-1])\nv\n```\n\n### Reshaping\n\n  Arrays can be reshaped into any form, which contains the same number of elements. For example, a 4-element array can be reshaped into a 2x2 array, or a 2x2 array can be reshaped into a 4-element array. Here are some examples:\n\n```{python}\n#| slideshow: {slide_type: fragment}\na=np.zeros(4)\na\n```\n\n```{python}\n#| ExecuteTime: {end_time: '2019-04-09T12:09:59.284858Z', start_time: '2019-04-09T12:09:59.280261Z'}\n#| slideshow: {slide_type: fragment}\nnp.reshape(a,(2,2))\n```\n\n### Adding a new dimension: newaxis\n\n  With `newaxis`, we can insert new dimensions in an array, for example converting a vector to a column or row matrix. Here are some examples:\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  v = np.array([1,2,3])\n  v\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  v.shape\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  # make a column matrix of the vector v\n  v[:, np.newaxis]\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  # column matrix\n  v[:,np.newaxis].shape\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  # row matrix\n  v[np.newaxis,:].shape\n```\n\n### Stacking and repeating arrays\n\n  Using function `repeat`, `tile`, `vstack`, `hstack`, and `concatenate` we can create larger vectors and matrices from smaller ones by repeating or stacking. Please try the individual functions yourself in your notebook. We wont discuss them in detail here.\n\n#### Tile and repeat\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  a = np.array([[1, 2], [3, 4]])\n  a\n```\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  # repeat each element 3 times\n  np.repeat(a, 3)\n```\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  # tile the matrix 3 times\n  np.tile(a, 3)\n```\n\n#### Concatenate\n\nConcatenate joins arrays along an existing axis. Here are some examples:\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  a = np.array([[1, 2], [3, 4]])\n  a\n```\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  b = np.array([[5, 6]])\n```\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  np.concatenate((a, b), axis=0)\n```\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  np.concatenate((a, b.T), axis=1)\n```\n\n#### Hstack and vstack\n\nhstack and vstack stack arrays horizontally and vertically. Here are some examples:\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  a = np.array([1, 2, 3])\n  b = np.array([2, 3, 4])\n```\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  np.vstack((a,b))\n```\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  np.hstack((a,b.T))\n```\n\n## Applying mathematical functions\n\n  All kinds of mathematical operations can be carried out on arrays. Typically these operation act element wise as seen from the examples below where `a` is an array of numbers from 0 to 9.\n\n### Operation involving one array\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  a=np.arange(0, 10, 1.5)\n  a\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  a/2\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  a**2\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  np.sin(a)\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  np.exp(-a)\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  (a+2)/3\n```\n\n### Operations involving multiple arrays\n\n  Operation between multiple vectors allow in particular very quick operations. The operations address then elements of the same index. These operations are called vector operations since the concern the whole array at the same time. The product between two vectors results therefore not in a dot product, which gives one number but in an array of multiplied elements.\n\n```{python}\n  #| ExecuteTime: {end_time: '2017-04-20T21:16:34.978152+02:00', start_time: '2017-04-20T21:16:34.973278'}\n  #| slideshow: {slide_type: fragment}\n  a = np.array([34., -12, 5.,1.2])\n  b = np.array([68., 5.0, 20.,40.])\n```\n\n```{python}\n  #| ExecuteTime: {end_time: '2017-04-20T21:16:41.810170+02:00', start_time: '2017-04-20T21:16:41.804038'}\n  #| slideshow: {slide_type: fragment}\n  a + b\n```\n\n```{python}\n  #| ExecuteTime: {end_time: '2017-04-20T21:16:48.002366+02:00', start_time: '2017-04-20T21:16:47.996136'}\n  #| slideshow: {slide_type: fragment}\n  #| tags: []\n  2*b\n```\nxxw\n```{python}\n  #| ExecuteTime: {end_time: '2017-04-20T21:20:19.373091+02:00', start_time: '2017-04-20T21:20:19.367493'}\n  #| slideshow: {slide_type: fragment}\n  a*np.exp(-b)\n```\n\n```{python}\n  #| tags: []\n  v1=np.array([1,2,3])\n  v2=np.array([4,2,3])\n```\n\n<div class=\"section-application\">\n## Application\n  - Simulating and plotting the trajectory of a projectile under the influence of gravity (2D motion).\n  - Introduction to vector addition and resolving vectors into components.\n  - Visualization: Plotting the path of the projectile and velocity vectors.\n  - Homework: Simulate projectile motion with air resistance (optional for advanced students).\n</div>\n","srcMarkdownNoYaml":"\n\n# Dynamics and Simple Motion\n\n  - Lists and arrays (introduction to `numpy` for numerical operations).\n  - Basic vector operations using `numpy`.\n\n\n::: {.callout-note title=\"Numpy Array\"}\nThe NumPy array, formally called ndarray in NumPy documentation, is the real workhorse of data structures for scientific and engineering applications. The NumPy array is similar to a list but where all the elements of the list are of the same type. The elements of a **NumPy array** are usually numbers, but can also be booleans, strings, or other objects. When the elements are numbers, they must all be of the same type. For example, they might be all integers or all floating point numbers. NumPy arrays are more efficient than Python lists for storing and manipulating data.\n:::\n\n```{python}\n    #| slideshow: {slide_type: fragment}\n    import numpy as np\n```\n\n## Creating Numpy Arrays\n\n  There are a number of ways to initialize new numpy arrays, for example from\n\n  * a Python list or tuples using `np.array`\n  * using functions that are dedicated to generating numpy arrays, such as `arange`, `linspace`, etc.\n  * reading data from files which will be covered in the files section of this course.\n\n### From lists\n\n  For example, to create new vector and matrix arrays from Python lists we can use the `numpy.array` function. This is demonstrated in the following cells:\n\n```{python}\n  #this is a list\n  a = [0, 0, 1, 4, 7, 16, 31, 64, 127]\n\n  type(a)\n```\n\n```{python}\n\n  b=np.array(a,dtype=float)\n  type(b)\n```\n\n### Using array-generating functions\n\n  For larger arrays it is inpractical to initialize the data manually, using explicit python lists. Instead we can use one of the many functions in `numpy` that generate arrays of different forms and shapes.\n  Some of the more common are:\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  # create a range\n\n  x = np.arange(0, 10, 1) # arguments: start, stop, step\n  x\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  x = np.arange(-5, -2, 0.1)\n  x\n```\n\n::: {.callout-note title=\"linspace\"}\n\n  The `linspace` function creates an array of N evenly spaced points between a starting point and an ending point. The form of the function is linspace(start, stop, N).If the third argument N is omitted,then N=50. The function `linspace` always includes the end points.\n\n:::\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  # using linspace, both end points ARE included\n  np.linspace(0,10,25)\n```\n\n::: {.callout-note title=\"logspace\"}\n  `logspace` is doing equivelent things with logaritmic spacing. The function `logspace` generates an array of N points between decades 10^start and 10^stop. The form of the function is logspace(start, stop, N). If the third argument N is omitted, then N=50. The function `logspace` always includes the end points.\n:::\n\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  np.logspace(0, 10, 10, base=np.e)\n```\n\nOther types of array creation techniques are listed below. Try around with these commands to get a feeling what they do.\n\n\n::: {.callout-note title=\"mgrid\"}\n\n  `mgrid` generates a multi-dimensional matrix with increasing value entries, for example in columns and rows. The arguments are similar to `arange` and `linspace`.\n:::\n\n```{python}\n#| slideshow: {slide_type: fragment}\nx, y = np.mgrid[0:1:0.1, 0:5] # similar to meshgrid in MATLAB\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\nx\n```\n\n```{python}\n#| tags: []\ny\n```\n\n```{python}\n#| tags: []\nnp.array([[1,2,3],[4,5,6],[7,8,9]])\n```\n\n\n::: {.callout-note title=\"diag\"}\n\n  `diag` generates a diagonal matrix with the list supplied to it as the diagonal values. The values can be also offset from the main diagonal by using the optional argument `k`. If `k` is positive, the diagonal is above the main diagonal, if negative, below the main diagonal.\n:::\n\n```{python}\n#| tags: []\n# a diagonal matrix\nnp.diag([1,2,3])\n```\n\n```{python}\n## diagonal with offset from the main diagonal\nnp.diag([1,2,3], k=-1)\n```\n\n::: {.callout-note title=\"zeros and ones\"}\n\n  `zeros` and `ones` creates a matrix with the dimensions given in the argument and filled with 0 or 1. The argument is a tuple with the dimensions of the matrix. For example, `np.zeros((3,3))` creates a 3x3 matrix filled with zeros.\n:::\n\n```{python}\n#| slideshow: {slide_type: fragment}\nnp.zeros((3,3))\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\nnp.ones((3,3))\n```\n\n## Manipulating NumPy arrays\n\n### Slicing\n\n  Slicing is the name for extracting part of an array by the syntax `M[lower:upper:step]`. When any of these are unspecified, they default to the values `lower=0`, `upper=size of dimension`, `step=1`. We can also use negative indices to count from the end of the array. Here are some examples:\n\n```{python}\n#| slideshow: {slide_type: fragment}\nA = np.array([1,2,3,4,5])\nA\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\nA[1:4]\n```\n\n  Any of the three parameters in `M[lower:upper:step]` can be ommited.\n\n```{python}\n#| slideshow: {slide_type: fragment}\nA[::] # lower, upper, step all take the default values\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\nA[::2] # step is 2, lower and upper defaults to the beginning and end of the array\n```\n\n  Negative indices counts from the end of the array (positive index from the begining) and can be used in any of the three slicing parameters. Here are some examples:\n\n```{python}\n#| slideshow: {slide_type: fragment}\nA = np.array([1,2,3,4,5])\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\nA[-1] # the last element in the array\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\nA[2:] # the last three elements\n```\n\n  Index slicing works exactly the same way for multidimensional arrays. We can slice along each axis independently. Here are some examples:\n\n```{python}\n#| slideshow: {slide_type: fragment}\nA = np.array([[n+m*10 for n in range(5)] for m in range(5)])\nA\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\n# a block from the original array\nA[1:3, 1:4]\n```\n\n\n::: {.callout-note title=\"Differences\"}\n\n  **Slicing** can be effectively used to calculate differences for example for the calculation of derivatives. Here the position $y_i$ of an object has been measured at times $t_i$ and stored in an array each. We wish to calculate the average velocity at the times $t_{i}$ from the arrays by the formula\n\n  \\begin{equation}\n  v_{i}=\\frac{y_i-y_{i-1}}{t_{i}-t_{i-1}}\n  \\end{equation}\n:::\n\n\n```{python}\n#| slideshow: {slide_type: fragment}\ny = np.array([ 0. , 1.3, 5. , 10.9, 18.9, 28.7, 40. ])\nt = np.array([ 0. , 0.49, 1. , 1.5 , 2.08, 2.55, 3.2 ])\n```\n\n```{python}\n#| slideshow: {slide_type: fragment}\nv = (y[1:]-y[:-1])/(t[1:]-t[:-1])\nv\n```\n\n### Reshaping\n\n  Arrays can be reshaped into any form, which contains the same number of elements. For example, a 4-element array can be reshaped into a 2x2 array, or a 2x2 array can be reshaped into a 4-element array. Here are some examples:\n\n```{python}\n#| slideshow: {slide_type: fragment}\na=np.zeros(4)\na\n```\n\n```{python}\n#| ExecuteTime: {end_time: '2019-04-09T12:09:59.284858Z', start_time: '2019-04-09T12:09:59.280261Z'}\n#| slideshow: {slide_type: fragment}\nnp.reshape(a,(2,2))\n```\n\n### Adding a new dimension: newaxis\n\n  With `newaxis`, we can insert new dimensions in an array, for example converting a vector to a column or row matrix. Here are some examples:\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  v = np.array([1,2,3])\n  v\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  v.shape\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  # make a column matrix of the vector v\n  v[:, np.newaxis]\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  # column matrix\n  v[:,np.newaxis].shape\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  # row matrix\n  v[np.newaxis,:].shape\n```\n\n### Stacking and repeating arrays\n\n  Using function `repeat`, `tile`, `vstack`, `hstack`, and `concatenate` we can create larger vectors and matrices from smaller ones by repeating or stacking. Please try the individual functions yourself in your notebook. We wont discuss them in detail here.\n\n#### Tile and repeat\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  a = np.array([[1, 2], [3, 4]])\n  a\n```\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  # repeat each element 3 times\n  np.repeat(a, 3)\n```\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  # tile the matrix 3 times\n  np.tile(a, 3)\n```\n\n#### Concatenate\n\nConcatenate joins arrays along an existing axis. Here are some examples:\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  a = np.array([[1, 2], [3, 4]])\n  a\n```\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  b = np.array([[5, 6]])\n```\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  np.concatenate((a, b), axis=0)\n```\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  np.concatenate((a, b.T), axis=1)\n```\n\n#### Hstack and vstack\n\nhstack and vstack stack arrays horizontally and vertically. Here are some examples:\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  a = np.array([1, 2, 3])\n  b = np.array([2, 3, 4])\n```\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  np.vstack((a,b))\n```\n\n```{python}\n  #| slideshow: {slide_type: skip}\n  np.hstack((a,b.T))\n```\n\n## Applying mathematical functions\n\n  All kinds of mathematical operations can be carried out on arrays. Typically these operation act element wise as seen from the examples below where `a` is an array of numbers from 0 to 9.\n\n### Operation involving one array\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  a=np.arange(0, 10, 1.5)\n  a\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  a/2\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  a**2\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  np.sin(a)\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  np.exp(-a)\n```\n\n```{python}\n  #| slideshow: {slide_type: fragment}\n  (a+2)/3\n```\n\n### Operations involving multiple arrays\n\n  Operation between multiple vectors allow in particular very quick operations. The operations address then elements of the same index. These operations are called vector operations since the concern the whole array at the same time. The product between two vectors results therefore not in a dot product, which gives one number but in an array of multiplied elements.\n\n```{python}\n  #| ExecuteTime: {end_time: '2017-04-20T21:16:34.978152+02:00', start_time: '2017-04-20T21:16:34.973278'}\n  #| slideshow: {slide_type: fragment}\n  a = np.array([34., -12, 5.,1.2])\n  b = np.array([68., 5.0, 20.,40.])\n```\n\n```{python}\n  #| ExecuteTime: {end_time: '2017-04-20T21:16:41.810170+02:00', start_time: '2017-04-20T21:16:41.804038'}\n  #| slideshow: {slide_type: fragment}\n  a + b\n```\n\n```{python}\n  #| ExecuteTime: {end_time: '2017-04-20T21:16:48.002366+02:00', start_time: '2017-04-20T21:16:47.996136'}\n  #| slideshow: {slide_type: fragment}\n  #| tags: []\n  2*b\n```\nxxw\n```{python}\n  #| ExecuteTime: {end_time: '2017-04-20T21:20:19.373091+02:00', start_time: '2017-04-20T21:20:19.367493'}\n  #| slideshow: {slide_type: fragment}\n  a*np.exp(-b)\n```\n\n```{python}\n  #| tags: []\n  v1=np.array([1,2,3])\n  v2=np.array([4,2,3])\n```\n\n<div class=\"section-application\">\n## Application\n  - Simulating and plotting the trajectory of a projectile under the influence of gravity (2D motion).\n  - Introduction to vector addition and resolving vectors into components.\n  - Visualization: Plotting the path of the projectile and velocity vectors.\n  - Homework: Simulate projectile motion with air resistance (optional for advanced students).\n</div>\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","number-sections":true,"css":["../../styles.css"],"include-before-body":["../../quarto-header.html"],"toc":true,"toc-depth":4,"output-file":"01-lecture03.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","bibliography":["../../references.bib"],"comments":{"hypothesis":false},"open-graph":{"title":"Title for Open Graph"},"theme":["simplex","../../custom.scss"],"backgroundcolor":"#F5F5F5","header-includes":["<img src=\"../../CompSoft_banner.png\" style=\"width: 100%; height: auto; display: block; margin: 0 auto;\">\n"],"toc-location":"right","toc-title":"On this page","title":"Lecture 3"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","number-sections":true,"output-file":"pdf-book"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"block-headings":true,"bibliography":["../../references.bib"],"comments":{"hypothesis":false},"open-graph":{"title":"Title for Open Graph"},"documentclass":"scrreprt","title":"Lecture 3"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}